import 'dart:async';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:io_photobooth/photobooth/services/print_service.dart';
import 'package:io_photobooth/photobooth/services/fullscreen_service.dart';

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ç–æ–±—É–¥–∫–∏
class PhotoboothSettings {
  const PhotoboothSettings({
    this.countdownDuration = const Duration(seconds: 5),
    this.autoPrint = true,
    this.autoRestart = true,
    this.restartDelay = const Duration(seconds: 10),
    this.showInstructions = true,
    this.instructionsDuration = const Duration(seconds: 3),
    this.enableSound = true,
    this.maxPhotosPerSession = 1,
  });

  final Duration countdownDuration;
  final bool autoPrint;
  final bool autoRestart;
  final Duration restartDelay;
  final bool showInstructions;
  final Duration instructionsDuration;
  final bool enableSound;
  final int maxPhotosPerSession;

  PhotoboothSettings copyWith({
    Duration? countdownDuration,
    bool? autoPrint,
    bool? autoRestart,
    Duration? restartDelay,
    bool? showInstructions,
    Duration? instructionsDuration,
    bool? enableSound,
    int? maxPhotosPerSession,
  }) {
    return PhotoboothSettings(
      countdownDuration: countdownDuration ?? this.countdownDuration,
      autoPrint: autoPrint ?? this.autoPrint,
      autoRestart: autoRestart ?? this.autoRestart,
      restartDelay: restartDelay ?? this.restartDelay,
      showInstructions: showInstructions ?? this.showInstructions,
      instructionsDuration: instructionsDuration ?? this.instructionsDuration,
      enableSound: enableSound ?? this.enableSound,
      maxPhotosPerSession: maxPhotosPerSession ?? this.maxPhotosPerSession,
    );
  }
}

/// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ç–æ–±—É–¥–∫–∏
enum PhotoboothState {
  idle,           // –û–∂–∏–¥–∞–Ω–∏–µ
  instructions,   // –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  countdown,      // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
  takingPhoto,    // –°—ä–µ–º–∫–∞ —Ñ–æ—Ç–æ
  processing,     // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
  printing,       // –ü–µ—á–∞—Ç—å
  completed,      // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
  error,          // –û—à–∏–±–∫–∞
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ç–æ–±—É–¥–∫–∏
class PhotoboothModeService {
  static final PhotoboothModeService _instance = PhotoboothModeService._internal();
  factory PhotoboothModeService() => _instance;
  PhotoboothModeService._internal();

  PhotoboothSettings _settings = const PhotoboothSettings();
  PhotoboothState _currentState = PhotoboothState.idle;
  Timer? _timer;
  int _currentCountdown = 0;
  int _photosInSession = 0;
  bool _isActive = false;

  final StreamController<PhotoboothState> _stateController = StreamController<PhotoboothState>.broadcast();
  final StreamController<int> _countdownController = StreamController<int>.broadcast();
  final StreamController<String> _messageController = StreamController<String>.broadcast();

  // Streams –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  Stream<PhotoboothState> get stateStream => _stateController.stream;
  Stream<int> get countdownStream => _countdownController.stream;
  Stream<String> get messageStream => _messageController.stream;

  // Callbacks –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å UI
  Future<Uint8List?> Function()? onTakePhoto;
  Future<void> Function(Uint8List imageBytes)? onPhotoTaken;
  VoidCallback? onSessionCompleted;
  void Function(String error)? onError;

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º —Ñ–æ—Ç–æ–±—É–¥–∫–∏
  Future<void> startPhotoboothMode({
    PhotoboothSettings? settings,
    Future<Uint8List?> Function()? takePhotoCallback,
    Future<void> Function(Uint8List imageBytes)? photoTakenCallback,
    VoidCallback? sessionCompletedCallback,
    void Function(String error)? errorCallback,
  }) async {
    if (_isActive) return;

    _settings = settings ?? _settings;
    onTakePhoto = takePhotoCallback;
    onPhotoTaken = photoTakenCallback;
    onSessionCompleted = sessionCompletedCallback;
    onError = errorCallback;

    _isActive = true;
    _photosInSession = 0;

    try {
      // –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
      await FullscreenService().enterKioskMode();
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é
      await _startSession();
    } catch (e) {
      _handleError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ç–æ–±—É–¥–∫–∏: $e');
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ñ–æ—Ç–æ–±—É–¥–∫–∏
  Future<void> stopPhotoboothMode() async {
    if (!_isActive) return;

    _isActive = false;
    _timer?.cancel();
    _timer = null;

    try {
      await FullscreenService().exitKioskMode();
    } catch (e) {
      debugPrint('Error exiting kiosk mode: $e');
    }

    _setState(PhotoboothState.idle);
    _setMessage('–†–µ–∂–∏–º —Ñ–æ—Ç–æ–±—É–¥–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /// –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
  Future<void> _startSession() async {
    if (!_isActive) return;

    _photosInSession = 0;

    if (_settings.showInstructions) {
      await _showInstructions();
    } else {
      await _startCountdown();
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  Future<void> _showInstructions() async {
    _setState(PhotoboothState.instructions);
    _setMessage('–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å! –§–æ—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ ${_settings.countdownDuration.inSeconds} —Å–µ–∫—É–Ω–¥');

    _timer = Timer(_settings.instructionsDuration, () {
      if (_isActive) _startCountdown();
    });
  }

  /// –ù–∞—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
  Future<void> _startCountdown() async {
    _setState(PhotoboothState.countdown);
    _currentCountdown = _settings.countdownDuration.inSeconds;
    _countdownController.add(_currentCountdown);

    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!_isActive) {
        timer.cancel();
        return;
      }

      _currentCountdown--;
      _countdownController.add(_currentCountdown);

      if (_currentCountdown <= 0) {
        timer.cancel();
        _takePhoto();
      } else {
        _setMessage('–§–æ—Ç–æ —á–µ—Ä–µ–∑ $_currentCountdown...');
      }
    });
  }

  /// –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
  Future<void> _takePhoto() async {
    _setState(PhotoboothState.takingPhoto);
    _setMessage('–£–ª—ã–±–∞–π—Ç–µ—Å—å! üì∏');

    try {
      final imageBytes = await onTakePhoto?.call();
      
      if (imageBytes != null) {
        _photosInSession++;
        await _processPhoto(imageBytes);
      } else {
        _handleError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ');
      }
    } catch (e) {
      _handleError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—ä–µ–º–∫–µ: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ
  Future<void> _processPhoto(Uint8List imageBytes) async {
    _setState(PhotoboothState.processing);
    _setMessage('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ...');

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –Ω–æ–≤–æ–º —Ñ–æ—Ç–æ
      await onPhotoTaken?.call(imageBytes);

      if (_settings.autoPrint) {
        await _printPhoto(imageBytes);
      } else {
        await _completeSession();
      }
    } catch (e) {
      _handleError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: $e');
    }
  }

  /// –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ñ–æ—Ç–æ
  Future<void> _printPhoto(Uint8List imageBytes) async {
    _setState(PhotoboothState.printing);
    _setMessage('–ü–µ—á–∞—Ç–∞–µ–º —Ñ–æ—Ç–æ...');

    try {
      await PrintService().quickPrint(imageBytes);
      await _completeSession();
    } catch (e) {
      _handleError('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: $e');
    }
  }

  /// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
  Future<void> _completeSession() async {
    _setState(PhotoboothState.completed);
    _setMessage('–ì–æ—Ç–æ–≤–æ! –ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ üì∑');

    onSessionCompleted?.call();

    if (_settings.autoRestart) {
      _timer = Timer(_settings.restartDelay, () {
        if (_isActive) _startSession();
      });
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
      _timer = Timer(const Duration(seconds: 5), () {
        if (_isActive) _setState(PhotoboothState.idle);
      });
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
  void _handleError(String error) {
    _setState(PhotoboothState.error);
    _setMessage('–û—à–∏–±–∫–∞: $error');
    onError?.call(error);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    _timer = Timer(const Duration(seconds: 5), () {
      if (_isActive && _settings.autoRestart) {
        _startSession();
      }
    });
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  void _setState(PhotoboothState state) {
    _currentState = state;
    _stateController.add(state);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  void _setMessage(String message) {
    _messageController.add(message);
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
  void triggerNewSession() {
    _timer?.cancel();
    if (_isActive) {
      _startSession();
    }
  }

  /// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
  void skipCurrentStage() {
    _timer?.cancel();
    
    switch (_currentState) {
      case PhotoboothState.instructions:
        _startCountdown();
        break;
      case PhotoboothState.countdown:
        _takePhoto();
        break;
      default:
        break;
    }
  }

  // Getters
  PhotoboothState get currentState => _currentState;
  PhotoboothSettings get settings => _settings;
  bool get isActive => _isActive;
  int get currentCountdown => _currentCountdown;
  int get photosInSession => _photosInSession;

  /// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  void updateSettings(PhotoboothSettings newSettings) {
    _settings = newSettings;
  }

  /// –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
  void dispose() {
    _timer?.cancel();
    _stateController.close();
    _countdownController.close();
    _messageController.close();
  }
}
