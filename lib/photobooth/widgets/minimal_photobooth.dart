import 'dart:async';
import 'dart:html' as html;
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:io_photobooth/photobooth/photobooth.dart';
import 'package:photobooth_ui/photobooth_ui.dart';

/// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–æ—Ç–æ–±—É–¥–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
class MinimalPhotobooth extends StatefulWidget {
  const MinimalPhotobooth({super.key});

  @override
  State<MinimalPhotobooth> createState() => _MinimalPhotoboothState();
}

class _MinimalPhotoboothState extends State<MinimalPhotobooth> {
  bool _isFullscreen = false;
  bool _isAutoMode = false;
  int _countdown = 0;
  Timer? _timer;
  String _message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ç–æ–±—É–¥–∫—É!';
  
  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  void _toggleFullscreen() {
    try {
      if (_isFullscreen) {
        html.document.exitFullscreen();
      } else {
        html.document.documentElement?.requestFullscreen();
      }
      setState(() => _isFullscreen = !_isFullscreen);
    } catch (e) {
      _showSnackBar('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }

  /// –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
  void _startAutoMode() {
    setState(() {
      _isAutoMode = true;
      _message = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω';
    });
    _startCountdown();
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
  void _stopAutoMode() {
    _timer?.cancel();
    setState(() {
      _isAutoMode = false;
      _countdown = 0;
      _message = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω';
    });
  }

  /// –ù–∞—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
  void _startCountdown() {
    setState(() => _countdown = 5);
    
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        _countdown--;
        _message = _countdown > 0 ? '–§–æ—Ç–æ —á–µ—Ä–µ–∑ $_countdown —Å–µ–∫...' : '–£–ª—ã–±–∞–π—Ç–µ—Å—å! üì∏';
      });

      if (_countdown <= 0) {
        timer.cancel();
        _takePhoto();
      }
    });
  }

  /// –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
  void _takePhoto() {
    context.read<PhotoboothBloc>().add(const PhotoboothPhotoTaken());
    setState(() => _message = '–§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    Timer(const Duration(seconds: 2), () {
      _printPhoto();
    });

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (_isAutoMode) {
      Timer(const Duration(seconds: 5), () {
        if (_isAutoMode) _startCountdown();
      });
    }
  }

  /// –ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ
  void _printPhoto() {
    try {
      html.window.print();
      setState(() => _message = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—á–∞—Ç—å!');
      _showSnackBar('–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—á–∞—Ç—å');
    } catch (e) {
      _showSnackBar('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏');
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: PhotoboothColors.black,
      appBar: AppBar(
        backgroundColor: PhotoboothColors.black,
        foregroundColor: PhotoboothColors.white,
        title: const Text('–§–û–¢–û–ë–£–î–ö–ê'),
        actions: [
          IconButton(
            icon: Icon(_isFullscreen ? Icons.fullscreen_exit : Icons.fullscreen),
            onPressed: _toggleFullscreen,
            tooltip: '–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
          ),
        ],
      ),
      body: Column(
        children: [
          // –°—Ç–∞—Ç—É—Å
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            color: PhotoboothColors.blue.withOpacity(0.1),
            child: Text(
              _message,
              style: const TextStyle(
                color: PhotoboothColors.white,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          
          // –û–±–ª–∞—Å—Ç—å —Ñ–æ—Ç–æ/–∫–∞–º–µ—Ä—ã
          Expanded(
            child: Container(
              margin: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                border: Border.all(color: PhotoboothColors.white.withOpacity(0.3)),
                borderRadius: BorderRadius.circular(12),
              ),
              child: _buildPhotoArea(),
            ),
          ),
          
          // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          _buildControls(),
        ],
      ),
      
      // –û–≤–µ—Ä–ª–µ–π –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
      body: _countdown > 0 ? _buildCountdownOverlay() : null,
    );
  }

  Widget _buildPhotoArea() {
    return BlocBuilder<PhotoboothBloc, PhotoboothState>(
      builder: (context, state) {
        if (state.image != null) {
          return ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: Image.memory(
              state.image!,
              fit: BoxFit.contain,
              width: double.infinity,
              height: double.infinity,
            ),
          );
        }
        
        return const Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.camera_alt,
                size: 100,
                color: PhotoboothColors.white,
              ),
              SizedBox(height: 20),
              Text(
                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—ä–µ–º–∫–∏',
                style: TextStyle(
                  color: PhotoboothColors.white,
                  fontSize: 18,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildControls() {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          // –ö–Ω–æ–ø–∫–∞ —Ñ–æ—Ç–æ
          ElevatedButton.icon(
            onPressed: _isAutoMode ? null : _takePhoto,
            icon: const Icon(Icons.camera_alt),
            label: const Text('–§–û–¢–û'),
            style: ElevatedButton.styleFrom(
              backgroundColor: PhotoboothColors.blue,
              foregroundColor: PhotoboothColors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            ),
          ),
          
          // –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
          ElevatedButton.icon(
            onPressed: _isAutoMode ? _stopAutoMode : _startAutoMode,
            icon: Icon(_isAutoMode ? Icons.stop : Icons.play_arrow),
            label: Text(_isAutoMode ? '–°–¢–û–ü' : '–ê–í–¢–û'),
            style: ElevatedButton.styleFrom(
              backgroundColor: _isAutoMode ? PhotoboothColors.red : PhotoboothColors.green,
              foregroundColor: PhotoboothColors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            ),
          ),
          
          // –ö–Ω–æ–ø–∫–∞ –ø–µ—á–∞—Ç–∏
          BlocBuilder<PhotoboothBloc, PhotoboothState>(
            builder: (context, state) {
              return ElevatedButton.icon(
                onPressed: state.image != null ? _printPhoto : null,
                icon: const Icon(Icons.print),
                label: const Text('–ü–ï–ß–ê–¢–¨'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: PhotoboothColors.orange,
                  foregroundColor: PhotoboothColors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildCountdownOverlay() {
    return Positioned.fill(
      child: Container(
        color: PhotoboothColors.black.withOpacity(0.9),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                _countdown.toString(),
                style: const TextStyle(
                  color: PhotoboothColors.white,
                  fontSize: 150,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              Text(
                _message,
                style: const TextStyle(
                  color: PhotoboothColors.white,
                  fontSize: 24,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }
}
