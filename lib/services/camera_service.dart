import 'dart:async';
import 'dart:html' as html;
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
// ignore: avoid_web_libraries_in_flutter
import 'dart:ui_web' as ui_web;

/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π
class CameraService {
  static final CameraService _instance = CameraService._internal();
  factory CameraService() => _instance;
  CameraService._internal();

  html.MediaStream? _currentStream;
  html.VideoElement? _videoElement;
  List<CameraDevice> _availableCameras = [];
  CameraDevice? _selectedCamera;
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä
  Future<List<CameraDevice>> getAvailableCameras() async {
    if (!kIsWeb) {
      // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ platform channels
      return [CameraDevice('default', '–ö–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', CameraType.builtin)];
    }

    try {
      debugPrint('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞–º–µ—Ä...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É MediaDevices API
      if (html.window.navigator.mediaDevices == null) {
        debugPrint('‚ùå MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        return [CameraDevice('default', '–ö–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', CameraType.builtin)];
      }

      debugPrint('‚úÖ MediaDevices API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');

      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É
      debugPrint('üîê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É...');
      html.MediaStream? permissionStream;
      try {
        permissionStream = await html.window.navigator.mediaDevices!.getUserMedia({
          'video': {'facingMode': 'user'}
        });
        debugPrint('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –ø–æ–ª—É—á–µ–Ω–æ');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        permissionStream.getTracks().forEach((track) => track.stop());
      } catch (e) {
        debugPrint('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: $e');
        // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      debugPrint('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      final devices = await html.window.navigator.mediaDevices!.enumerateDevices();
      debugPrint('üìã –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞–π–¥–µ–Ω–æ: ${devices.length}');
      
      _availableCameras.clear();
      
      int cameraIndex = 1;
      for (final device in devices) {
        debugPrint('üîç –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: kind=${device.kind}, label="${device.label}", id="${device.deviceId}"');
        
        if (device.kind == 'videoinput') {
          String label = device.label ?? '';
          String deviceId = device.deviceId ?? '';
          
          // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —Å–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          if (label.isEmpty || label == '') {
            label = '–ö–∞–º–µ—Ä–∞ $cameraIndex';
            cameraIndex++;
          }
          
          // –ï—Å–ª–∏ deviceId –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º default ID
          if (deviceId.isEmpty) {
            deviceId = 'camera_$cameraIndex';
          }
          
          final cameraType = _determineCameraType(label);
          _availableCameras.add(CameraDevice(
            deviceId,
            label,
            cameraType,
          ));
          
          debugPrint('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–º–µ—Ä–∞: $label ($deviceId) - $cameraType');
        }
      }
      
      // –ï—Å–ª–∏ –∫–∞–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (_availableCameras.isEmpty) {
        debugPrint('‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        _availableCameras.add(CameraDevice('default', '–ö–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', CameraType.builtin));
      }
      
      debugPrint('üéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: ${_availableCameras.length}');
      for (final camera in _availableCameras) {
        debugPrint('üì∑ ${camera.label} (${camera.deviceId}) - ${camera.type}');
      }
      
      return _availableCameras;
    } catch (e) {
      debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      final defaultCamera = CameraDevice('default', '–ö–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', CameraType.builtin);
      _availableCameras = [defaultCamera];
      return _availableCameras;
    }
  }

  /// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–∞–º–µ—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  CameraType _determineCameraType(String label) {
    final lowerLabel = label.toLowerCase();
    
    // –í–Ω–µ—à–Ω–∏–µ USB –∫–∞–º–µ—Ä—ã
    if (lowerLabel.contains('usb') || 
        lowerLabel.contains('external') ||
        lowerLabel.contains('webcam') ||
        lowerLabel.contains('logitech') ||
        lowerLabel.contains('microsoft') ||
        lowerLabel.contains('creative') ||
        lowerLabel.contains('genius')) {
      return CameraType.external;
    }
    
    // –ü–µ—Ä–µ–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ (—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è)
    if (lowerLabel.contains('front') || 
        lowerLabel.contains('user') ||
        lowerLabel.contains('facing front') ||
        lowerLabel.contains('selfie')) {
      return CameraType.front;
    }
    
    // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞
    if (lowerLabel.contains('back') || 
        lowerLabel.contains('rear') ||
        lowerLabel.contains('facing back') ||
        lowerLabel.contains('environment')) {
      return CameraType.back;
    }
    
    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
    if (lowerLabel.contains('integrated') ||
        lowerLabel.contains('built-in') ||
        lowerLabel.contains('facetime') ||
        lowerLabel.contains('isight') ||
        lowerLabel.contains('internal')) {
      return CameraType.builtin;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π
    return CameraType.builtin;
  }

  /// –í—ã–±—Ä–∞—Ç—å –∫–∞–º–µ—Ä—É
  Future<bool> selectCamera(String deviceId) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–∞–º–µ—Ä–∞
    if (_selectedCamera != null && _selectedCamera!.deviceId == deviceId) {
      debugPrint('üì∑ –ö–∞–º–µ—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: ${_selectedCamera!.label}');
      return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –Ω–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è
    }
    
    final camera = _availableCameras.firstWhere(
      (cam) => cam.deviceId == deviceId,
      orElse: () => throw Exception('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'),
    );
    
    debugPrint('üì∑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–º–µ—Ä—É: ${camera.label}');
    _selectedCamera = camera;
    return await _initializeCamera();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É
  Future<bool> _initializeCamera() async {
    if (!kIsWeb || _selectedCamera == null) {
      debugPrint('‚ùå –ù–µ –≤–µ–± –∏–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
      return false;
    }

    try {
      debugPrint('üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É: ${_selectedCamera!.label} (${_selectedCamera!.deviceId})');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫
      await stopCamera();

      final constraints = {
        'video': {
          'deviceId': {'exact': _selectedCamera!.deviceId},
          'width': {'ideal': 1920},
          'height': {'ideal': 1080},
          'frameRate': {'ideal': 30},
        },
        'audio': false,
      };

      debugPrint('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º constraints: $constraints');

      _currentStream = await html.window.navigator.mediaDevices!
          .getUserMedia(constraints);

      debugPrint('‚úÖ MediaStream –ø–æ–ª—É—á–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç...');

      // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      _videoElement = html.VideoElement();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
      _videoElement!.autoplay = true;
      _videoElement!.muted = true;
      _videoElement!.style.width = '100%';
      _videoElement!.style.height = '100%';
      _videoElement!.style.objectFit = 'cover';
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
      _videoElement!.srcObject = _currentStream;
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è Flutter (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–±)
      if (kIsWeb) {
        final viewType = 'camera-video-preview';
        try {
          ui_web.platformViewRegistry.registerViewFactory(
            viewType,
            (int viewId) => _videoElement!,
          );
          debugPrint('üìπ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å viewType: $viewType');
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞: $e');
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      _videoElement!.onLoadedMetadata.listen((event) {
        debugPrint('üìπ –í–∏–¥–µ–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${_videoElement!.videoWidth}x${_videoElement!.videoHeight}');
      });
      
      _videoElement!.onPlaying.listen((event) {
        debugPrint('‚ñ∂Ô∏è –í–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
      });
      
      _videoElement!.onError.listen((event) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: $event');
      });
      
      await _videoElement!.play();
      debugPrint('üìπ –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  html.VideoElement? get videoElement => _videoElement;

  /// –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
  Future<Uint8List?> takePhoto({CameraSettings? settings}) async {
    if (_videoElement == null || _currentStream == null) {
      throw Exception('–ö–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    try {
      final canvas = html.CanvasElement();
      final context = canvas.getContext('2d') as html.CanvasRenderingContext2D;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
      final width = settings?.width ?? _videoElement!.videoWidth;
      final height = settings?.height ?? _videoElement!.videoHeight;
      
      canvas.width = width;
      canvas.height = height;

      // –†–∏—Å—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä —Å –≤–∏–¥–µ–æ –Ω–∞ canvas
      context.drawImageScaled(_videoElement!, 0, 0, width, height);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (settings?.applyEffects == true) {
        _applyPhotoEffects(context, width, height, settings!);
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Uint8List
      final dataUrl = canvas.toDataUrl('image/png');
      final base64Data = dataUrl.split(',')[1];
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
      final bytes = html.window.atob(base64Data);
      final uint8List = Uint8List(bytes.length);
      for (int i = 0; i < bytes.length; i++) {
        uint8List[i] = bytes.codeUnitAt(i);
      }

      return uint8List;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ —Å—ä–µ–º–∫–∏ —Ñ–æ—Ç–æ: $e');
      return null;
    }
  }

  /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ —Ñ–æ—Ç–æ
  void _applyPhotoEffects(
    html.CanvasRenderingContext2D context,
    int width,
    int height,
    CameraSettings settings,
  ) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (settings.brightness != 1.0 || settings.contrast != 1.0) {
      context.filter = 'brightness(${settings.brightness}) contrast(${settings.contrast})';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (settings.addFrame) {
      context.strokeStyle = '#ffffff';
      context.lineWidth = 10;
      context.strokeRect(0, 0, width, height);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    if (settings.watermark != null) {
      context.fillStyle = 'rgba(255, 255, 255, 0.7)';
      context.font = '24px Arial';
      context.fillText(settings.watermark!, 20, height - 30);
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–µ—Ä—É
  Future<void> stopCamera() async {
    if (_currentStream != null) {
      _currentStream!.getTracks().forEach((track) => track.stop());
      _currentStream = null;
    }
    
    if (_videoElement != null) {
      _videoElement!.srcObject = null;
      _videoElement = null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞–º–µ—Ä—É
  CameraDevice? get selectedCamera => _selectedCamera;

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–º–µ—Ä—ã
  Future<bool> isCameraSupported() async {
    if (!kIsWeb) return true;
    
    try {
      return html.window.navigator.mediaDevices != null;
    } catch (e) {
      return false;
    }
  }

  /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  Future<bool> requestCameraPermission() async {
    if (!kIsWeb) return true;

    try {
      final stream = await html.window.navigator.mediaDevices!
          .getUserMedia({'video': true, 'audio': false});
      
      // –°—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫, –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      stream.getTracks().forEach((track) => track.stop());
      return true;
    } catch (e) {
      debugPrint('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: $e');
      return false;
    }
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ
class CameraDevice {
  final String deviceId;
  final String label;
  final CameraType type;

  CameraDevice(this.deviceId, this.label, this.type);

  @override
  String toString() => label;
}

/// –¢–∏–ø –∫–∞–º–µ—Ä—ã
enum CameraType {
  builtin,   // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è
  external,  // –í–Ω–µ—à–Ω—è—è USB
  front,     // –§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è
  back,      // –ó–∞–¥–Ω—è—è
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
class CameraSettings {
  final int width;
  final int height;
  final double brightness;
  final double contrast;
  final bool addFrame;
  final String? watermark;
  final bool applyEffects;

  const CameraSettings({
    this.width = 1920,
    this.height = 1080,
    this.brightness = 1.0,
    this.contrast = 1.0,
    this.addFrame = false,
    this.watermark,
    this.applyEffects = false,
  });
}
