import 'dart:async';
import 'dart:html' as html;
import 'dart:js' as js;
import 'dart:typed_data';
import 'package:flutter/foundation.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
class PrinterService {
  static final PrinterService _instance = PrinterService._internal();
  factory PrinterService() => _instance;
  PrinterService._internal();

  /// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
  List<String> _availablePrinters = [];
  String? _selectedPrinter;

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
  Future<List<String>> getAvailablePrinters() async {
    try {
      debugPrint('üñ®Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...');
      
      // –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Web Print API
      if (kIsWeb) {
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ Web API
        _availablePrinters = await _getWebPrinters();
        
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö —á–µ—Ä–µ–∑ JavaScript
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Web Print API
          if (js.context.hasProperty('navigator') && 
              js.context['navigator'].hasProperty('printing')) {
            debugPrint('‚úÖ Web Print API –¥–æ—Å—Ç—É–ø–µ–Ω');
          } else {
            debugPrint('‚ö†Ô∏è Web Print API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Web Print API: $e');
        }
        
        debugPrint('üéØ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: ${_availablePrinters.length}');
        for (int i = 0; i < _availablePrinters.length; i++) {
          debugPrint('üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä ${i + 1}: ${_availablePrinters[i]}');
        }
        
        return _availablePrinters;
      }
      
      // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏
      debugPrint('üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤');
      _availablePrinters = [
        '–ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        'PDF –ø—Ä–∏–Ω—Ç–µ—Ä',
        '–°–µ—Ç–µ–≤—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã',
      ];
      
      debugPrint('üéØ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: ${_availablePrinters.length}');
      for (int i = 0; i < _availablePrinters.length; i++) {
        debugPrint('üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä ${i + 1}: ${_availablePrinters[i]}');
      }
      
      return _availablePrinters;
    } catch (e) {
      debugPrint('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      _availablePrinters = ['–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'PDF –ø—Ä–∏–Ω—Ç–µ—Ä'];
      return _availablePrinters;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
  Future<List<String>> _getWebPrinters() async {
    List<String> printers = [];
    
    try {
      // –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã
      printers.addAll([
        '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        'PDF –ø—Ä–∏–Ω—Ç–µ—Ä',
        '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF',
        'Microsoft Print to PDF',
      ]);
      
      // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã —á–µ—Ä–µ–∑ JavaScript
      try {
        final jsResult = js.context.callMethod('eval', ['''
          (function() {
            var printers = [];
            
            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ API
            if (window.navigator && window.navigator.mediaDevices) {
              // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
            if (navigator.platform.indexOf('Win') !== -1) {
              printers.push('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ OneNote', '–§–∞–∫—Å', 'Microsoft XPS Document Writer');
            } else if (navigator.platform.indexOf('Mac') !== -1) {
              printers.push('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF', '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä');
            } else if (navigator.platform.indexOf('Linux') !== -1) {
              printers.push('Print to File (PDF)', 'CUPS-PDF');
            }
            
            return printers;
          })()
        ''']);
        
        if (jsResult != null && jsResult is List) {
          for (var printer in jsResult) {
            if (printer is String && !printers.contains(printer)) {
              printers.add(printer);
            }
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã: $e');
      }
      
      debugPrint('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Web API: ${printers.length}');
      
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      printers = ['–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'PDF –ø—Ä–∏–Ω—Ç–µ—Ä'];
    }
    
    return printers;
  }

  /// –í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä
  void selectPrinter(String printerName) {
    if (_availablePrinters.contains(printerName)) {
      _selectedPrinter = printerName;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä
  String? get selectedPrinter => _selectedPrinter;

  /// –ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  Future<bool> printImage(Uint8List imageData, {
    String? printerName,
    PrintSettings? settings,
  }) async {
    try {
      final targetPrinter = printerName ?? _selectedPrinter;
      
      if (targetPrinter == null) {
        throw Exception('–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω');
      }

      if (kIsWeb) {
        return await _printImageWeb(imageData, settings);
      }
      
      // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
      return await _printImageDesktop(imageData, targetPrinter, settings);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: $e');
      return false;
    }
  }

  /// –ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
  Future<bool> _printImageWeb(Uint8List imageData, PrintSettings? settings) async {
    try {
      debugPrint('üñ®Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–±-–ø–µ—á–∞—Ç—å...');
      
      // –°–æ–∑–¥–∞–µ–º blob –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      final blob = html.Blob([imageData], 'image/png');
      final url = html.Url.createObjectUrlFromBlob(blob);
      
      debugPrint('üñ®Ô∏è Blob —Å–æ–∑–¥–∞–Ω, URL: $url');
      
      // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç—å—é
      final printHtml = '''
        <!DOCTYPE html>
        <html>
        <head>
          <title>–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ</title>
          <style>
            body { margin: 0; padding: 0; }
            img { 
              width: 100%; 
              height: 100%; 
              object-fit: contain;
              page-break-inside: avoid;
            }
            @media print {
              body { margin: 0; }
              img { max-width: 100%; max-height: 100%; }
            }
          </style>
        </head>
        <body>
          <img src="$url" onload="window.print(); setTimeout(() => window.close(), 1000);" />
        </body>
        </html>
      ''';
      
      // –°–æ–∑–¥–∞–µ–º blob —Å HTML —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
      final htmlBlob = html.Blob([printHtml], 'text/html');
      final htmlUrl = html.Url.createObjectUrlFromBlob(htmlBlob);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
      final printWindow = html.window.open(htmlUrl, '_blank', 'width=800,height=600');
      
      if (printWindow != null) {
        debugPrint('üñ®Ô∏è –û–∫–Ω–æ –ø–µ—á–∞—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç—å—é');
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º URLs —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        Timer(const Duration(seconds: 15), () {
          html.Url.revokeObjectUrl(url);
          html.Url.revokeObjectUrl(htmlUrl);
          debugPrint('üñ®Ô∏è URLs –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
        });
        
        return true;
      } else {
        debugPrint('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø–µ—á–∞—Ç–∏');
        html.Url.revokeObjectUrl(url);
        html.Url.revokeObjectUrl(htmlUrl);
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–µ—á–∞—Ç–∏: $e');
      return false;
    }
  }

  /// –ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  Future<bool> _printImageDesktop(
    Uint8List imageData, 
    String printerName, 
    PrintSettings? settings
  ) async {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ platform channels –∏–ª–∏ FFI
    debugPrint('–ü–µ—á–∞—Ç—å –Ω–∞ $printerName (–¥–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    return true;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
  Future<PrinterStatus> getPrinterStatus(String printerName) async {
    try {
      // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      if (_availablePrinters.contains(printerName)) {
        return PrinterStatus.ready;
      }
      return PrinterStatus.offline;
    } catch (e) {
      return PrinterStatus.error;
    }
  }
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—á–∞—Ç–∏
class PrintSettings {
  final String width;
  final String height;
  final String orientation;
  final int copies;
  final bool colorMode;

  const PrintSettings({
    this.width = '10cm',
    this.height = '15cm',
    this.orientation = 'portrait',
    this.copies = 1,
    this.colorMode = true,
  });
}

/// –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
enum PrinterStatus {
  ready,
  printing,
  offline,
  error,
  outOfPaper,
  outOfInk,
}
